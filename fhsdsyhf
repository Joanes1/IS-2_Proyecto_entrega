
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import configuration.UtilDate;

import java.util.Date;
import java.util.Vector;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.junit.Before;
import org.junit.Test;

import configuration.UtilDate;
import dataAccess.DataAccess;
import domain.Event;
import domain.Sport;
import domain.Team;

public class gertaerakSortuDAWTest {
	// sut:system under test

	static DataAccess sut = new DataAccess();

	// additional operations needed to execute the test
	// static TestDataAccess testDA=new TestDataAccess();

	private Team t1;
	private Team t2;
	
	private String dep;
//
	private Date fecha;
//
	private String desc;
//
	@Before
	public void initialize() {
		t1 = new Team("Athletic");
		t2 =new Team("Athletico");
		SimpleDateFormat dsf = new SimpleDateFormat("dd/MM/yyyy");
		fecha=null;
		try {
			fecha= dsf.parse("12/12/2022");
		}catch(ParseException e) {
			e.printStackTrace();
		}
		desc = "Atletico-Athletic";
		Event ev = new Event(desc,fecha,t2,t1);
		dep="Futbol";
	}

	@Test
	// sut.gertaerakSortu: No existe el deporte insertado en la base de datos
	public void test1() {
		boolean emaitza = true;
		try {
			String dep1 = "Cricket";
			String desc1 = "PEPE-PACO";
			emaitza = sut.gertaerakSortu(desc1, fecha, dep1);
			assertEquals(emaitza, false);

		} catch (Exception e) {
			fail();

		}

	}

	@Test
	// sut.gertaerakSortu: Ya existe esa descripcion
	public void test2() {
		try {

			boolean emaitza = sut.gertaerakSortu(desc, fecha, dep);
			assertEquals(emaitza, false);
		} catch (Exception e) {
			System.out.println("Errorea: " + e.getMessage());
			fail();
		}

	}

	@Test
	// sut.gertaerakSortu: Todo bien
	public void test3() {
		try {

			String desc1 = "Antonio-Felipe";

			boolean emaitza = sut.gertaerakSortu(desc1, fecha, dep);
			assertEquals(emaitza, true);
			Vector<Event> ebentos = sut.getEvents(fecha);
			boolean a = false;
			Event ebento = null;
			int i = 0;
			while (!a && i < ebentos.size()) {
				if (ebentos.get(i).getDescription() == desc) {
					ebento = ebentos.get(i);
					a = true;
				}
				i++;
			}
			sut.gertaeraEzabatu(ebento);
		} catch (Exception e) {
			fail();

		}

	}
}

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import org.junit.Before;
import org.junit.Test;

import configuration.UtilDate;
import dataAccess.DataAccess;
import domain.Event;
import domain.Team;

public class gertaeraSortuDABTest {
	// sut:system under test
	static DataAccess sut = new DataAccess();


		private Team t1;
		private Team t2;
		
		private String dep;
	//
		private Date fecha;
	//
		private String desc;
	//
		@Before
		public void initialize() {
			t1 = new Team("Athletic");
			t2 =new Team("Athletico");
			SimpleDateFormat dsf = new SimpleDateFormat("dd/MM/yyyy");
			fecha=null;
			try {
				fecha= dsf.parse("12/12/2022");
			}catch(ParseException e) {
				e.printStackTrace();
			}
			desc = "Atletico-Athletic";
			Event ev = new Event(desc,fecha,t2,t1);
			dep="Futbol";
		}

	@Test		//El evento se crea correctamente, los datos son correctos y la descripcion no existe en otro evento
	public void test1() {

		try {
			String desc="Felipe-SanPaco";
			boolean emaitza = sut.gertaerakSortu(desc, fecha, dep);

			Vector<Event> eventos = sut.getEvents(fecha);
			boolean a = false;
			Event e = null;
			int i = 0;
			while (!a && i < eventos.size()) {
				if (eventos.get(i).getDescription() == desc) {
					e = eventos.get(i);
					a = true;
				}
				i++;
			}
			sut.gertaeraEzabatu(e);
			assertEquals(emaitza, true);
		} catch (Exception e) {
			System.out.println("Lehenengo error eman du");
			fail();

		}
	}

	@Test // El metodo da error porque la fecha es anterior a hoy
	public void test2() {
		boolean b = true;
		try {
			String dep = "Futbol";
			String desc = "Levante-PSG";

			Calendar today = Calendar.getInstance();
			int month = today.get(Calendar.MONTH);
			int year = today.get(Calendar.YEAR);
			if (month == 12) {
				month = 0;
				year += 1;
			}
			fecha = UtilDate.newDate(year - 6, month, 17);

			boolean emaitza = sut.gertaerakSortu(desc, fecha, dep);
			b = sut.gertaerakSortu(desc, fecha, dep);

			Vector<Event> eventos = sut.getEvents(fecha);
			boolean a = false;
			Event evento = null;
			int i = 0;
			while (!a && i < eventos.size()) {
				if (eventos.get(i).getDescription() == desc) {
					evento = eventos.get(i);
					a = true;
				}
				i++;
			}
			sut.gertaeraEzabatu(evento);
		} catch (Exception e) {
			b = false;
		}
		assertEquals(b, false);
	}

	@Test
	public void test3() {
		boolean b = true;
		try {
			String dep = "Futbol";
			String desc = "Levante contra PSG";

			sut.gertaerakSortu(desc, fecha, dep);

			Vector<Event> ebentos = sut.getEvents(fecha);
			boolean a = false;
			Event ebento = null;
			int i = 0;
//			while (!a && i < ebentos.size()) {
//				if (ebentos.get(i).getDescription() == desc) {
//					ebento = ebentos.get(i);
//					a = true;
//				}
//				i++;
//			}
			sut.gertaeraEzabatu(ebento);
		} catch (Exception e) {
			b = false;

		}
		assertEquals(b, false);
	}

}

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.text.ParseException;
import java.text.SimpleDateFormat;
//

import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
//

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
//
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
//

import org.mockito.junit.MockitoJUnitRunner;
//

import businessLogic.BLFacade;
import businessLogic.BLFacadeImplementation;
import configuration.UtilDate;
import dataAccess.DataAccess;
import domain.Event;
import domain.Sport;
import domain.Team;
//


@RunWith(MockitoJUnitRunner.class)
public class gertaeraSortuMockIntTest {
	DataAccess dataAccess = Mockito.mock(DataAccess.class);
	
//
//	@InjectMocks
	
//

	BLFacade sut = new BLFacadeImplementation(dataAccess);
//

	private Event ev;
//

	private Team t1;
	private Team t2;
	
	private String dep;
//

	private Date fecha;
//

	private String desc;
//
//	
	@Before
	public void initialize() {
		t1 = new Team("Athletic");
		t2 =new Team("Athletico");
		SimpleDateFormat dsf = new SimpleDateFormat("dd/MM/yyyy");
		fecha=null;
		try {
			fecha= dsf.parse("12/12/2022");
		}catch(ParseException e) {
			e.printStackTrace();
		}
		desc = "Atletico-Athletic";
		ev = new Event(desc,fecha,t2,t1);
		dep="Futbol";
	}
	
//	@Test		//El evento se crea correctamente, los datos son correctos y la descripcion no existe en otro evento
//	public void test1() {
//
//		try {
//			String desc = "Nadal-Athletic";
//			Mockito.doReturn(true).when(dataAccess).gertaerakSortu(desc, fecha, dep);
//			boolean emaitza = sut.gertaerakSortu(desc, fecha, dep);
//			Mockito.verify(dataAccess, Mockito.times(1)).gertaerakSortu(desc, Mockito.any(Event.class).getEventDate(), Mockito.any(Sport.class).getIzena());
//			Vector<Event> eventos = sut.getEvents(fecha);
//			boolean a = false;
//			Event e = null;
//			int i = 0;
//			if(eventos!=null) {
//				while (!a && i < eventos.size()) {
//					if (eventos.get(i).getDescription() == desc) {
//						e = eventos.get(i);
//						a = true;
//					}
//					i++;
//				}
//			}
//			sut.gertaeraEzabatu(e);
//			assertEquals(emaitza, true);
//		} catch (Exception e) {
//			System.out.println("Lehenengo mockitok error eman du");
//			fail();
//
//		}
//	}

	@Test // El metodo da error porque la fecha es anterior a hoy
	public void test2() {
		boolean b = true;
		try {
			String dep = "Futbol";
			String desc = "Levante-PSG";

			Calendar today = Calendar.getInstance();
			int month = today.get(Calendar.MONTH);
			int year = today.get(Calendar.YEAR);
			if (month == 12) {
				month = 0;
				year += 1;
			}
			fecha = UtilDate.newDate(year - 6, month, 17);

			b = sut.gertaerakSortu(desc, fecha, dep);

			Vector<Event> eventos = sut.getEvents(fecha);
			boolean a = false;
			Event evento = null;
			int i = 0;
			while (!a && i < eventos.size()) {
				if (eventos.get(i).getDescription() == desc) {
					evento = eventos.get(i);
					a = true;
				}
				i++;
			}
			sut.gertaeraEzabatu(evento);
		} catch (Exception e) {
			b = false;
		}
		assertEquals(b, false);
	}

//	@Test
//	public void test3() {
//		boolean b = true;
//		try {
//			String dep = "Futbol";
//			String desc = "Levante contra PSG";
//			Mockito.doReturn(false).when(dataAccess).gertaerakSortu(desc, fecha, t1.getIzena());
//			b=sut.gertaerakSortu(desc, fecha, dep);
//
//					
//			
//		} catch (Exception e) {
//			b = true;
//
//		}
//		assertEquals(b, false);
//	}
//
//	
//}
}
